import React, { useEffect } from 'react';
import BackgroundFetch from 'react-native-background-fetch';
import { Provider as PaperProvider } from 'react-native-paper';
import { QueryClient, QueryClientProvider } from 'react-query';
import { Home } from './screens/Home';
import PushNotification from 'react-native-push-notification';

const queryClient = new QueryClient();

export const sendLocalNotification = (message: string) => {
    PushNotification.localNotification({
        /* Android Only Properties */
        channelId: 'channel-id', // (required) channelId, if the channel doesn't exist, notification will not trigger.
        ticker: 'My Notification Ticker', // (optional)
        showWhen: true, // (optional) default: true
        autoCancel: true, // (optional) default: true
        largeIcon: 'ic_launcher', // (optional) default: "ic_launcher". Use "" for no large icon.
        largeIconUrl: 'https://www.example.tld/picture.jpg', // (optional) default: undefined
        smallIcon: 'ic_notification', // (optional) default: "ic_notification" with fallback for "ic_launcher". Use "" for default small icon.
        bigText: 'My big text that will be shown when notification is expanded', // (optional) default: "message" prop
        subText: 'This is a subText', // (optional) default: none
        bigPictureUrl: 'https://www.example.tld/picture.jpg', // (optional) default: undefined
        bigLargeIcon: 'ic_launcher', // (optional) default: undefined
        bigLargeIconUrl: 'https://www.example.tld/bigicon.jpg', // (optional) default: undefined
        color: 'red', // (optional) default: system default
        vibrate: true, // (optional) default: true
        vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
        tag: 'some_tag', // (optional) add tag to message
        group: 'group', // (optional) add group to message
        groupSummary: false, // (optional) set this notification to be the group summary for a group of notifications, default: false
        ongoing: false, // (optional) set whether this is an "ongoing" notification
        priority: 'high', // (optional) set notification priority, default: high
        visibility: 'private', // (optional) set notification visibility, default: private
        ignoreInForeground: false, // (optional) if true, the notification will not be visible when the app is in the foreground (useful for parity with how iOS notifications appear). should be used in combine with `com.dieam.reactnativepushnotification.notification_foreground` setting
        shortcutId: 'shortcut-id', // (optional) If this notification is duplicative of a Launcher shortcut, sets the id of the shortcut, in case the Launcher wants to hide the shortcut, default undefined

        messageId: 'google:message_id', // (optional) added as `message_id` to intent extras so opening push notification can find data stored by @react-native-firebase/messaging module.

        invokeApp: true, // (optional) This enable click on actions to bring back the application to foreground or stay in background, default: true

        /* iOS and Android properties */
        // id: 0, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
        // title: 'My Notification Title', // (optional)
        message, // (required)
    });
};

export const App = () => {
    useEffect(() => {
        const initBackgroundFetch = async () => {
            // BackgroundFetch event handler.
            const onEvent = async (taskId: string) => {
                console.log('[BackgroundFetch] task: ', taskId);
                console.log(new Date().toLocaleTimeString());
                sendLocalNotification(taskId);
                // Do your background work...
                // await this.addEvent(taskId);
                // IMPORTANT:  You must signal to the OS that your task is complete.
                BackgroundFetch.finish(taskId);
            };

            // Timeout callback is executed when your Task has exceeded its allowed running-time.
            // You must stop what you're doing immediately BackgorundFetch.finish(taskId)
            const onTimeout = async (taskId: string) => {
                console.warn('[BackgroundFetch] TIMEOUT task: ', taskId);
                BackgroundFetch.finish(taskId);
            };

            // Initialize BackgroundFetch only once when component mounts.
            let status = await BackgroundFetch.configure(
                {
                    minimumFetchInterval: 1,
                    enableHeadless: true,
                    startOnBoot: true,
                    stopOnTerminate: false,
                },
                onEvent,
                onTimeout,
            );

            console.log('[BackgroundFetch] configure status: ', status);
        };

        initBackgroundFetch();
    }, []);
    return (
        <QueryClientProvider client={queryClient}>
            <PaperProvider>
                <Home />
            </PaperProvider>
        </QueryClientProvider>
    );
};
